" ------------------------------------------------------------------------------
" .vimrc - Vim startup script.
" ------------------------------------------------------------------------------
"
" Helpful commands:
"
"   :set termcap                          " to see terminal codes
"   :he group-name
"   :he highlight-groups
"   :he cterm-colors
"   :set guifont=*                        " brings up a dialog
"
"   lcd %:p:h           " cd to the current file's path
" ------------------------------------------------------------------------------

" Enable loading filetype and indentation plugins
filetype plugin on
filetype indent on

" Turn syntax highlighting on
syntax on

" ------------------------------------------------------------------------------
" Completion
"   :help ins-completion
"   http://www.vim.org/tips/tip.php?tip_id=1386
" ------------------------------------------------------------------------------
  set completeopt=menu,longest,preview

  " When menu is visible, use <tab> to commit the selection
  inoremap <expr> <tab> pumvisible() ? "<c-y>" : "\<c-g>u\<tab>"
  inoremap <expr> <c-n> pumvisible() ? "<c-n>" : "\<lt>c-n>\<lt>c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>"

  " When menu is visible, use <cr> to commit the select, and bring up the next
  " menu
  inoremap <expr> <c-f> pumvisible() ? "<c-f>" : "\<lt>c-x>\<lt>c-f>\<lt>c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>"
  inoremap <expr> <cr> pumvisible() ? "<c-y><c-x><c-f><c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>" : "\<c-g>u\<cr>"
" ------------------------------------------------------------------------------

" Use UTF-8 as the default buffer encoding
set enc=utf-8

" Remember up to 100 'colon' commmands and search patterns
set history=100

" Jump to matching bracket for 2/10th of a second (works with showmatch)
set matchtime=2

" ------------------------------------------------------------------------------
" Printing
" ------------------------------------------------------------------------------

  set printoptions=paper:letter,duplex:off,formfeed:n
  set printfont=Monospace\ 9

" ------------------------------------------------------------------------------
" General settings
" ------------------------------------------------------------------------------

  set tags=./.tags,~/.tags              " tag file order
  set nofoldenable                      " code folding (:help fold.txt)
"  colorscheme desert256
  set t_Co=256
  set nobackup                          " use backups?
  set noeb                              " error bell
  set novb                              " visual bell
  set vb t_vb=                          " disable visual bell
  set hls
  set ru
  set vb
  set expandtab
  set tabstop=4
  set sts=4
  set shiftwidth=4
  set autoindent
  set nowrap
  set sb
  set ai
  set nodigraph
  set aw
  set noic
  set nolist
  set magic
  set nu
  set remap
  set showmatch
  set noterse
  set timeout
  set ws
  set nowa
  set ruler
  set incsearch                       " search as i type
  set cpo-=<                          " Use full <> options
  " Scroll when cursor gets within 3 characters of top/bottom edge
  set scrolloff=3
  " Round indent to multiple of 'shiftwidth' for > and < commands
  set shiftround
  " Write swap file to disk after every 50 characters
  set updatecount=50
  set pastetoggle=<F4>
" ------------------------------------------------------------------------------
" Local settings
" ------------------------------------------------------------------------------

  set shell=/bin/bash                 " shell for ! commands
  set shellcmdflag=-c                 " for ! commands (-c is default)
  set bg=dark                         " background is: light or dark
  set bdir=~/tmp                       " backup directory
  set dir=~/tmp                        " swap file directory
  set ff=dos

" ------------------------------------------------------------------------------
" Make vim turn *off* expandtab for files named Makefile or makefile
" We need the tab literal
" ------------------------------------------------------------------------------

  autocmd BufNewFile,BufRead [Mm]akefile* set noexpandtab

" ------------------------------------------------------------------------------
" Maps
" ------------------------------------------------------------------------------

" paste/yank/cut
  nmap <C-p> "+p
  nmap <S-y> "+y
  nmap <C-x> "+d

" toggle this and last buffer
  nmap <BS> :e#<CR>

  " Delete whitespace at end of lines
  map <F2> :%s/\s\+$//<CR>

  " Global search and replace
  map <F3> :%s/

  " Highlight lines longer than 80 chars
  map <F8> /\%>80v.\+<CR>

  " Open our clipboard
  map <F12> <ESC>:e ~/.clip<CR>

  " SCROLL: left
  map <C-H> zh

  " SCROLL: right
  map <C-L> zl

  " Reformat a line (no tabs please) to 80 columns
  map <F5> 080lF r<Cr><Esc>

  " Single-quote the current word (cursor has to be at beginning of word)
  map <Leader>q /[^ -~]\+<Cr>

  " Indent curly block
  map <Leader>S 0mxk$%k^>`x

  " Un-indent curly block
  map <Leader>s 0mxk$%k^<`x

  " Delete line and move down
  map <Leader>d dd}

  " Go to tab 1-5
  map <Leader>1 1gt
  map <Leader>2 2gt
  map <Leader>3 3gt
  map <Leader>4 4gt
  map <Leader>5 5gt
  map <Leader>b i<Cr><Esc>

  " tab navigation like firefox
  "nmap <tab> :tabnext<Cr>
  "nmap <S-tab> :tabprevious<CR>
  map <Tab> gt
  map <S-Tab> gT

" ------------------------------------------------------------------------------
" Automatically set screen title
" ------------------------------------------------------------------------------

autocmd BufEnter * let &titlestring = expand("%:t")
if &term == "screen"
  set t_ts=k
  set t_fs=\
endif
if &term == "screen" || &term == "xterm"
  set title
endif


autocmd BufWriteCmd *.js,*.jsm :call CompileJS()
function! CompileJS()
    if &modified
        write
        execute "!diff /dev/null <(/usr/bin/node % |& grep .)"
    endif
endfunction

autocmd BufWriteCmd *.ts,*.tsx :call CompileTS()
function! CompileTS()
    if &modified
        write
        execute "!diff /dev/null <(/usr/bin/tsc --noEmit % |& grep .)"
    endif
endfunction

let javascript_enable_domhtmlcss=1

" Command to convert current line into formatted json
command! -range -nargs=0 -bar J <line1>,<line2>!python -m json.tool

" remap increment deincrement numbers
nnoremap <F6> <C-a>
nnoremap <F7> <C-x>

" Fix indenting in YAML files
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Set indent for javascript globally
autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab

" Set indent for gradle globally
autocmd FileType gradle setlocal ts=4 sts=4 sw=4 expandtab

" Set indent for json globally
autocmd FileType json setlocal ts=2 sts=2 sw=2 expandtab

" Initialize plugin system
call plug#begin()

Plug 'yuezk/vim-js'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'jparise/vim-graphql'

call plug#end()
